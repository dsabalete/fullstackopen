{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","axios","get","then","response","data","toggleImportanceOf","id","find","n","changedNote","newObject","put","update","map","catch","error","console","log","setTimeout","filter","notesToShow","index","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","post","returnedNote","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"qLAEMA,EAAU,a,OCUDC,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCGjCK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGJ,qBAAKJ,UAAU,QAAf,SAAwBI,KCapBC,EAlBA,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,2GCkFGC,EAxFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,iBAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WJPMC,IAAMC,IAAI5B,GAQX6B,MAAK,SAACC,GAAD,OAAcA,EAASC,QIA9BF,MAAK,SAACC,GACXX,EAASW,QAEd,IAEH,IAAME,EAAqB,SAACC,GACxB,IAAM/B,EAAOgB,EAAMgB,MAAK,SAACC,GAAD,OAAOA,EAAEF,KAAOA,KAClCG,EAAW,2BAAQlC,GAAR,IAAcG,WAAYH,EAAKG,aJClC,SAAC4B,EAAII,GACvB,OAAOV,IAAMW,IAAN,UAAatC,EAAb,YAAwBiC,GAAMI,IIAjCE,CAAON,EAAIG,GACNP,MAAK,WACFV,EACID,EAAMsB,KAAI,SAACtC,GAAD,OAAWA,EAAK+B,KAAOA,EAAK/B,EAAOkC,SAGpDK,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZjB,EAAgB,SAAD,OACFvB,EAAKK,QADH,sCAGfsC,YAAW,WACPpB,EAAgB,QACjB,KACHN,EAASD,EAAM4B,QAAO,SAACX,GAAD,OAAOA,EAAEF,KAAOA,UAsB5Cc,EAAczB,EAAUJ,EAAQA,EAAM4B,QAAO,SAAC5C,GAAD,OAAUA,EAAKG,aAElE,OACI,gCACI,uCAEA,cAAC,EAAD,CAAcK,QAASc,IAEvB,8BACI,yBAAQhB,QAAS,kBAAMe,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAItC,6BACKyB,EAAYP,KAAI,SAACtC,EAAM8C,GACpB,OACI,cAAC,EAAD,CAEI9C,KAAMA,EACNC,iBAAkB,kBAAM6B,EAAmB9B,EAAK+B,MAF3Ce,QAQrB,uBAAMC,SA5CE,SAACC,GACbA,EAAMC,iBACN,IJ1Bed,EI0BTe,EAAa,CACf7C,QAASa,EACTiC,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,KJ7BhBpB,EIgCRe,EJ/BKzB,IAAM+B,KAAK1D,EAASqC,GACrBR,MAAK,SAACC,GAAD,OAAcA,EAASC,SI8BpBF,MAAK,SAAC8B,GACrBxC,EAASD,EAAM0C,OAAOD,IACtBtC,EAAW,QAkCX,UACI,uBAAOwC,MAAOzC,EAAS0C,SA/BV,SAACZ,GACtB7B,EAAW6B,EAAMa,OAAOF,UA+BhB,wBAAQG,KAAK,SAAb,qBAGJ,cAAC,EAAD,Q,MCpFZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e5461163.chunk.js","sourcesContent":["import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/notes'\nconst baseUrl = '/api/notes'\n\nexport const getAll = () => {\n    const request = axios.get(baseUrl)\n    // const nonExisting = {\n    //     id: 10000,\n    //     content: 'This note is not saved to server',\n    //     date: '2019-05-30T17:30:31.098Z',\n    //     important: true\n    // }\n    // return request.then((response) => response.data.concat(nonExisting))\n    return request.then((response) => response.data)\n}\n\nexport const create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then((response) => response.data)\n}\n\nexport const update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return <div className='error'>{message}</div>\n}\n\nexport default Notification\n","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>\n                Note app, Department of Computer Science, University of Helsinki\n                2020\n            </em>\n        </div>\n    )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'\nimport { getAll, create, update } from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note...')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        getAll().then((response) => {\n            setNotes(response)\n        })\n    }, [])\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find((n) => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        update(id, changedNote)\n            .then(() => {\n                setNotes(\n                    notes.map((note) => (note.id !== id ? note : changedNote))\n                )\n            })\n            .catch((error) => {\n                console.log(error)\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter((n) => n.id !== id))\n            })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5\n        }\n\n        create(noteObject).then((returnedNote) => {\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll ? notes : notes.filter((note) => note.important)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={errorMessage} />\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n\n            <ul>\n                {notesToShow.map((note, index) => {\n                    return (\n                        <Note\n                            key={index}\n                            note={note}\n                            toggleImportance={() => toggleImportanceOf(note.id)}\n                        />\n                    )\n                })}\n            </ul>\n\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange} />\n                <button type='submit'>save</button>\n            </form>\n\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}